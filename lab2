# Лабораторная работа №2. Жукова Алла, Хлобустова Светлана БПМ-21-3
def fact(n):
    if n == 0:
        return 1
    else:
        return n*fact(n - 1)
def comb_sum(n,m):
    return n+m
def comb_mult(n,m):
    return n*m
def comb_with_repeat(n,m):
    return (comb_without_repeat(n+m-1,m))
def comb_without_repeat(n,m):
    res = fact(n)/fact(n-m)/fact(m)
    return res
def accom_with_repeat(n,m):
    return pow(n,m)
def accom_without_repeat(n,m):
    res = fact(n)/fact(n-m)
    return res
def perm_with_repeat(n,m):
    return (fact(n+m)/fact(n)/fact(m))
def perm_without_repeat(n):
    res = fact(n)
    return res


print("Введите номер комбинаторной схемы: \n"
                "1. По правилу суммы \n"
                "2. По правилу произведения \n"
                "3. Число сочетаний с повторениями \n"
                "4. Число сочетаний без повторений \n"
                "5. Число размещений с повторениями \n"
                "6. Число размещений без повторений \n"
                "7. Число перестановок с повторениями \n"
                "8. Число перестановок без повторений \n"
                "Для выхода введите 0.")
command = int(input())
while command != 0:
    if command == 1:  # правило суммы
        print("С помощью данного правила можно решить следующую задачу: \n"
              "В кафе есть напитки: n видов сока и m видов газировки. Введите n")
        n = int(input())
        print("Введите m.")
        m = int(input())
        res = int(comb_sum(n, m))
        print(f"Сколькими разными способами можно заказать напиток? Если напиток это либо сок, либо газировка.\n"
              f"Решение: сок можно выбрать {n} различными способами, газировку - {m}. \n"
              f"Причем способы выбора несовместны. Тогда по правилу суммы напиток можно выбрать {n}+{m}={res} способами\n")
    if command == 2:  # правило произведения
        print("С помощью данного правила можно решить следующую задачу: \n"
              "В классе учится n мальчиков и m девочек. Введите n")
        n = int(input())
        print("Введите m.")
        m = int(input())
        res = int(comb_mult(n, m))
        print(f"Сколькими способами можно выбрать двух дежурных: мальчика и девочку? \n"
              f"Т.к. в классе учится {n} мальчиков, то назначить одного дежурного можно {n} способами. \n"
              f"После того, как мы выбрали первого дежурного, второго мы можем выбрать из {m} девочек, т.е. {m} способами.\n"
              f"По теореме умножения двое дежурных могут быть выбраны {n}*{m}={res} способами.")
    if command == 3:  # число сочетаний с повторениями
        print("С помощью данного правила можно решить следующую задачу: \n"
              "Нужно выбрать m пирожных из n видов пирожных. \n"
              "Ввведите n:")
        n = int(input())
        print("Введите m:")
        m = int(input())
        res = int(comb_with_repeat(n, m))
        print(f"Сколькими способами это можно сделать? \n"
              f"Нужно найти число всевозможных групп по {m} элементов, которые можно составить\n"
              f"из данных {n} различных элементов, причем указанные элементы в каждой группе \n"
              f"могут повторяться, а сами группы отличаются друг от друга хотя бы одним элементом. \n"
              f"Это задача на отыскание числа сочетаний с повторениями из {n} элементов по {m}.\n"
              f"Следовательно, {n+m-1}!/({m}!*({n}-1)!)={res}")
    if command == 4:  # число сочетаний без повторений

        print("С помощью данного правила можно решить следующую задачу: \n"
              "Из n программистов нужно отобрать m для участия в проекте. \n"
              "Ввведите n:")
        n = int(input())
        print("Введите m:")
        m = int(input())
        res = int(comb_without_repeat(n, m))
        print("Сколькими способами это можно сделать? \n" 
              "В данном случае, порядок отбора не важен (выборка неупорядоченная); \n"
              "каждый кандидат может войти только один раз в выборку (выборка без повторений). \n"
              f"Поэтому рассматриваем неупорядоченные ⟨{n},{m}⟩ –выборки без повторений. \n"
              f"Количество способов отбора равно: {n}!/(({n}-{m})!*{m}!) = {res}")
    if command == 5:  # число размещений с повторениями
        print("С помощью данного правила можно решить следующую задачу: \n"
              "Распределите m пассажиров по n этажам. Возможны повторения")
        print("Введите число n")
        n = int(input())
        print("Введите число m")
        m = int(input())
        res = int(accom_with_repeat(n, m))
        print(f"Рассматриваем размещение {m} пассажиров по {n} этажам с повторениями: \n"
              f"{n}^{m} = {res} способов")
    if command == 6:  # число размещений без повторений
            print(f"С помощью данного правила можно решить следующую задачу: \n"
              "Для создания m-значного пароля используются символы из алфавита размером n. \n"
              "Сколько всего паролей без повторения символов можно составить? \n"
              "Введите n:")
        print("Введите число n - из скольких элементов производим выбор")
        n = int(input())
        print("Введите число m - количество элементов в одной группе")
        m = int(input())
        res = int(accom_without_repeat(n, m))
        print("Рассматриваем размещение n символов по m позициям без повторений: \n"
              f"{n}!/({n}-{m})! = {res} \n"
              f"Всего {res} паролей.")
    if command == 7:  # число перестановок с повторениями
        print(f"С помощью данного правила можно решить следующую задачу: \n"
              f"Сколькими способами можно расположить в ряд n зеленых и m красных лампочки? \n"
              f"Введите n:")
        n = int(input())
        print("Введите число m")
        m = int(input())
        res = perm_with_repeat(n,m)
        print(f"Нужно воспользоваться формулой перестановок с повторениями: ({n}+{m})!/({n}!*({m}!))={res} \n")
    if command == 8:  # число перестановок без повторений
        print(f"С помощью данного правила можно решить следующую задачу: \n"
              f"В морозилке лежат n порций мороженого от различных фирм. \n"
              f"Введите n:")
        n = int(input())
        res = perm_without_repeat(n)
        print("Сколькими способами можно выбрать порядок их потребления? \n"
              f"Каждый возможный набор есть ({n},{n})-выборка. \n"
              "Она будет упорядоченной и без повторений. \n"
              f"Иными словами, каждая такая выборка есть перестановка из {n} элементов исходного множества. \n"
              f"Согласно формуле общее количество этих перестановок таково: {n}! = {res}. \n")
    command = int(input())
