# Лабораторная работа №2. Жукова Алла, Хлобустова Светлана БПМ-21-3
def fact(n):
    if n == 0:
        return 1
    else:
        return n*fact(n - 1)
def comb_sum():
    pass
def comb_mult(n,m):
    return n*m
def comb_with_repeat():
    pass
def comb_without_repeat(n,m):
    res = fact(n)/fact(n-m)/fact(m)
    return res
def accom_with_repeat():
    pass
def accom_without_repeat(n,m):
    res = fact(n)/fact(n-m)
    return res
def perm_with_repeat():
    pass
def perm_without_repeat(n):
    res = fact(n)
    return res


print("Введите номер комбинаторной схемы: \n"
                "1. По правилу суммы \n"
                "2. По правилу произведения \n"
                "3. Число сочетаний с повторениями \n"
                "4. Число сочетаний без повторений \n"
                "5. Число размещений с повторениями \n"
                "6. Число размещений без повторений \n"
                "7. Число перестановок с повторениями \n"
                "8. Число перестановок без повторений \n"
                "Для выхода введите 0.")
command = int(input())
while command != 0:
    if command == 1:  # правило суммы
        comb_sum()
    if command == 2:  # правило произведения
        print("Введите количество вариантов выбора первого элемента")
        n = int(input())
        print("Введите количество вариантов выбора второго элемента")
        m = int(input())
        res = comb_mult(n, m)
        print(f"Количество возможных вариантов - {res}")
        print("С помощью данного правила можно решить следующую задачу: \n"
              "В классе учится 16 мальчиков и 10 девочек. Сколькими способами можно назначить двух дежурных?"
              " можно назначить либо мальчика, либо девочку."
              "Т.к. в классе учится 16 мальчиков и 10 девочек, то назначить первого дежурного можно 16+10=26 способами."
              "После того, как мы выбрали первого дежурного, второго мы можем выбрать из оставшихся 25 человек, т.е. 25-ю способами."
              "По теореме умножения двое дежурных могут быть выбраны 26*25=650 способами.")
    if command == 3:  # число сочетаний с повторениями
        comb_with_repeat()
    if command == 4:  # число сочетаний без повторений
        print("Введите число n - из скольких элементов производим выбор")
        n = int(input())
        print("Введите число m - сколько выбираем элементов")
        m = int(input())
        res = int(comb_without_repeat(n, m))
        print(f"Количество возможных сочетаний без повторений - {res}")
        print("С помощью данного правила можно решить следующую задачу: \n"
              "Из 10 программистов нужно отобрать 4 для участия в проекте. \n"
              "Сколькими способами это можно сделать? \n"
              "В данном случае, порядок отбора не важен (выборка неупорядоченная); \n"
              "каждый кандидат может войти только один раз в выборку (выборка без повторений). \n"
              "Поэтому рассматриваем неупорядоченные ⟨10,4⟩ –выборки без повторений. \n"
              "Количество способов отбора равно: 10!/((10-4)!*4!) = 2104")
    if command == 5:  # число размещений с повторениями
        accom_with_repeat()
    if command == 6:  # число размещений без повторений
        print("Введите число n - из скольких элементов производим выбор")
        n = int(input())
        print("Введите число m - количество элементов в одной группе")
        m = int(input())
        res = int(accom_without_repeat(n, m))
        print(f"Количество возможных размещений без повторений - {res}")
        print(f"С помощью данного правила можно решить следующую задачу: \n"
              "Для создания 3-значного пароля используются символы из алфавита {+,*,A,!,2}. \n"
              "Сколько всего паролей без повторения символов можно составить? \n"
              "По условию n = 5, k = 3. \n"
              "Рассматриваем размещение 5 символов по 3 позициям без повторений: \n"
              "5!/(5-3)! = 60 \n"
              "Всего 60 паролей.")
    if command == 7:  # число перестановок с повторениями
        perm_with_repeat()
    if command == 8:  # число перестановок без повторений
        print("Введите число n - из скольких элементов производим перестановки")
        n = int(input())
        res = perm_without_repeat(n)
        print(f"Количество возможных перестановок без повторений - {res}")
        print(f"С помощью данного правила можно решить следующую задачу: \n"
              "В морозилке лежат пять порций мороженого от различных фирм. \n"
              "Сколькими способами можно выбрать порядок их потребления? \n"
              "Пусть первому мороженому соответствует цифра 1, второму – цифра 2 и так далее. \n"
              "Мы получим множество U={1,2,3,4,5}, которое будет представлять содержимое морозилки. \n"
              " Порядок съедения может быть таким: (5,1,4,3,2) или таким (4,2,3,5,1). \n"
              "Каждый подобный набор есть (5,5)-выборка. \n"
              "Она будет упорядоченной и без повторений. \n"
              "Иными словами, каждая такая выборка есть перестановка из 5 элементов исходного множества. \n"
              "Согласно формуле общее количество этих перестановок таково: 5! = 120. \n")
    command = int(input())
